You are allowed to use the following functions:
◦ write
◦ malloc
◦ free
◦ exit
◦ The functions of man 3 stdarg


int printf( const char *format, ... );

%[флаги][ширина][.точность][размер]тип
Обязательными составными частями являются символ начала спецификатора формата (%) и тип.

• You have to manage the following conversions: csp :
    c — вывод символа с кодом, соответствующим переданному аргументу; переданное число приводится к типу unsigned char (или wchar t, если был указан модификатор длины l);
    s — вывод строки с нулевым завершающим байтом; если модификатор длины — l, выводится строка wchar_t*. В Windows значения типа s зависят от типа используемых функций. Если используется семейство printf функций, то s обозначает строку char*. Если используется семейство wprintf функций, то s обозначает строку wchar_t*.
    p — вывод указателя, внешний вид может существенно различаться в зависимости от внутреннего представления в компиляторе и платформе (например, 16-битная платформа MS-DOS использует форму записи вида FFEC:1003, 32-битная платформа с плоской адресацией использует адрес вида 00FA0030);


• You have to manage the following conversions: diouxX with the following flags: hh, h, l and ll. :
    Спецификатор	%d, %i, %o, %u, %x, %X :
        d, i — десятичное знаковое число, размер по умолчанию, sizeof( int ). По умолчанию записывается с правым выравниванием, знак пишется только для отрицательных чисел. '%d' и '%i' ведут себя одинаково при выводе, но имеют разные значения при вводе с помощью функции scanf();
        o — восьмеричное беззнаковое число, размер по умолчанию sizeof( int );
        u — десятичное беззнаковое число, размер по умолчанию sizeof( int );
        x и X — шестнадцатеричное беззнаковое число, x использует маленькие буквы (abcdef), X большие (ABCDEF), размер по умолчанию sizeof( int );
    hh	Аргумент имеет тип int или unsigned int, но принудительно приводится к типу signed char или unsigned char, соответственно
    h	Аргумент имеет тип int или unsigned int, но принудительно приводится к типу short int или unsigned short int, соответственно
    l  	long int или unsigned long int
    ll	long long int или unsigned long long int

• You have to manage the following conversion: f with the following flags: l and L. :
    f и F — числа с плавающей запятой. По умолчанию выводятся с точностью 6, если число по модулю меньше единицы, перед десятичной точкой пишется 0. Величины ±∞ представляются в форме [-]inf или [-]infinity, Величина Nan представляется как [-]nan или [-]nan(любой текст далее). Использование F выводит указанные величины заглавными буквами (-INF, NAN). Аргумент по умолчанию имеет размер double.

    L	long double

• You must manage %%
    Стандартным признаком начала спецификатора формата является символ % (Знак процента), для вывода самого знака % используется его удвоение %%.

• You must manage the flags #0-+ and space
    -	минус	    выводимое значение выравнивается по левому краю в пределах минимальной ширины поля	                            по правому
    +	плюс	    всегда указывать знак (плюс или минус) для выводимого десятичного числового значения	                        только для отрицательных чисел
     	пробел	    помещать перед результатом пробел, если первый символ значения не знак	                                        Вывод может начинаться с цифры.
     	            Символ + имеет больший приоритет, чем пробел. Используется только для десятичных числовых значений.
    #	октоторп	«альтернативная форма» вывода значения
                    При выводе чисел в формате перед числом будет указываться особенность формата (см. ниже).
    0	ноль	    дополнять поле до ширины, указанной в поле ширина управляющей последовательности, символом 0	                дополнять пробелами
                    Используется для типов d, i, o, u, x, X, a, A, e, E, f, F, g, G. Для типов d, i, o, u, x, X, если точность указана, этот флаг игнорируется. Для остальных типов поведение не определено.


• You must manage the minimum field-width
    Ширина (десятичное число или символ звёздочка) указывает минимальную ширину поля (включая знак для чисел). Если представление величины больше, чем ширина поля, то запись выходит за пределы поля (например, %2i для величины 100 даст значение поля в три символа), если представление величины менее указанного числа, то оно будет дополнено (по умолчанию) пробелами слева, поведение может меняться предшествующими флагами. Если в качестве ширины указана звёздочка, ширина поля указывается в списке аргументов перед значением для вывода (например, printf( "%0*x", 8, 15 ); выведет текст 0000000f).


• You must manage the precision
    указывает на минимальное количество символов, которое должно появиться при обработке типов d, i, o, u, x, X;
    указывает на минимальное количество символов, которое должно появиться после десятичной запятой (точки) при обработке типов a, A, e, E, f, F;
    максимальное количество значащих символов для типов g и G;
    максимальное число символов, которые будут выведены для типа s;
    Точность задаётся в виде точки с последующим десятичным числом или звёздочкой (*), если число или звёздочка отсутствует (присутствует только точка), то предполагается, что число равно нулю. Точка для указания точности используется даже в том случае, если при выводе чисел с плавающей запятой выводится запятая.

    Если после точки указан символ «звёздочка», то при обработке строки форматирования значение для поля читается из списка аргументов. (При этом, если символ звёздочка и в поле ширины и в поле точности, сначала указывается ширина, потом точность и лишь потом значение для вывода). Например, printf( "%0*.*f", 8, 4, 2.5 ); выведет текст 002.5000.
